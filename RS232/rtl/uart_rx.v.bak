module  uart_rx
(
    input   wire    sys_clk     ,
    input   wire    sys_rst_n   ,
    input   wire    rx          ,
    
    output  reg     [7:0]   po_data,
    output  reg             po_flag

);

reg     rx_reg1;
reg     rx_reg2;
reg     rx_reg3;
reg     start_flag;
reg     work_en;
wire     [12:0]  baud_cnt;
reg     bit_flag;
reg     [3:0]   bit_cnt;
reg     [7:0]   rx_data;
reg     rx_flag;

always@(posedge sys_clk or negedge sys_rst_n)
    if(sys_rst_n == 1'b0)
        begin
            rx_reg1 <= 1'b1;
            rx_reg2 <= 1'b1;
            rx_reg3 <= 1'b1;             
        end 
    else
        begin
            rx_reg1 <= rx       ;
            rx_reg2 <= rx_reg1  ;
            rx_reg3 <= rx_reg1  ;      
        end

always@(posedge sys_clk or negedge sys_rst_n)
    if(sys_rst_n == 1'b0)
        start_flag <= 1'b0;
    else    if(rx_reg2 == 1'b0 && rx_reg3 == 1'b1 && work_en == 1'b0)
        start_flag <= 1'b1;
    else
        start_flag <= 1'b0;
    
always@(posedge sys_clk or negedge sys_rst_n)
    if(sys_rst_n == 1'b0)    
        work_en <= 1'b0;
    else    if(start_flag == 1'b1)
        work_en <= 1'b1;
    else    if(bit_cnt == 4'd8 && bit_flag == 1'b1)
        work_en <= 1'b0;
    
assign  baud_cnt = (work_en == 1'b1) ? (baud_cnt + 1'b1) : 13'd0;

always@(posedge sys_clk or negedge sys_rst_n)
    if(sys_rst_n == 1'b0)
        bit_flag <= 1'b0;
    else    if(baud_cnt == 13'd2604)
        bit_flag <= 1'b1;
    else    
        bit_flag <= 1'b0;

always@(posedge sys_clk or negedge sys_rst_n)
    if(sys_rst_n == 1'b0)
        bit_cnt <= 4'b0;
    else    if(bit_cnt == 4'd8 && bit_flag == 1'b1)
        bit_cnt <= 4'd0;
    else    if(bit_flag == 1'b1)
        bit_cnt < = bit_cnt + 1'b1;
    else
        bit_cnt <= bit_cnt;
        
        





endmodule